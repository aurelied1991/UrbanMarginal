package controleur;
import modele.JeuServeur;
import modele.Jeu;
import modele.JeuClient;
import outils.connexion.AsyncResponse;
import outils.connexion.ClientSocket;
import outils.connexion.Connection;
import outils.connexion.ServeurSocket;
import vue.Arene;
import vue.ChoixPersonnage;
import vue.DemarrageJeu;
import javax.swing.JLabel;
import javax.swing.JPanel;


/**
 * Contr√¥leur principal du jeu, qui g√®re la logique de communication entre les diff√©rentes vues et les objets JeuServeur / JeuClient, en plus de g√©rer les connexions et les √©v√©nements du jeu
 */
public class Controle implements AsyncResponse, Global {
	
	/**
	 * Fen√™tres utilis√©es tout au long du jeu
	 * DemarrageJeu (o√π d√©marre le jeu)
	 */
	private DemarrageJeu frmDemarrageJeu ;
	/**
	 * Fen√™tre Arene (o√π se passe l'action)
	 */
	private Arene frmArene;
	/**
	 * Fen√™tre ChoixPersonnage (o√π on choisi son personnage et son pseudo)
	 */
	private ChoixPersonnage frmChoixPersonnage;
	
	/**
	 * Objet repr√©sentant le type du jeu : client ou serveur (jeuClient ou JeuServeur)
	 */
	private Jeu leJeu;
	
	/**
	 * Point d'entr√©e du programme, cr√©er d'une instance du contr√¥leur et lance l'application
	 * @param args non utilis√©
	 */
    public static void main(String[] args) {
        new Controle(); // Cr√©ation de l'instance du contr√¥leur qui lance l'application
    }

    
    /**
     * Constructeur qui cr√©e la fen√™tre de d√©marrage du jeu (frmDemarrageJeu), la rend visible et attend les interactions de l'utilisateur
     */
    private Controle() {
    	    this.frmDemarrageJeu = new DemarrageJeu(this);
			this.frmDemarrageJeu.setVisible(true); // Affiche la fen√™tre de d√©marrage
    }

	/**
	 * G√®re les choix effectu√©s dans la fen√™tre de d√©marrage du jeu (soit serveur, soit client)
	 * @param info La cha√Æne de caract√®res indiquant le choix de l'utilisateur ("serveur" ou "client")
	 */
	public void evenementEntreeJeu(String info) {
		if(info.equals("serveur")) {
			//Si l'utilisateur choisit "serveur" en cliquant sur "Start", on initialise le serveur et l'objet JeuServeur
			new ServeurSocket(this, PORT); // Cr√©e une connexion serveur
			this.leJeu = new JeuServeur(this); // Initialise un objet JeuServeur
			this.frmDemarrageJeu.dispose(); // Ferme la fen√™tre de d√©marrage
			this.frmArene = new Arene(this, SERVEUR); // Cr√©e la fen√™tre de jeu en mode serveur
			((JeuServeur)this.leJeu).constructionMurs(); // transtypage de leJeu en JeuServeur et configure les murs dans le jeu
			this.frmArene.setVisible(true); // Affiche la fen√™tre de jeu
		} else {
			//Si l'utilisateur choisit "client" en cliquant sur "Connect", une connexion client est √©tablie via ClientSocket, mais sans initialiser le serveur
			new ClientSocket(this, info, PORT); // Cr√©e une connexion client
		}
	}
	
	/**
	 * M√©thode qui g√®re le choix du personnage et du pseudo par l'utilisateur, re√ßu depuis la fen√™tre ChoixPersonnage
	 * @param pseudo Le pseudo du joueur
	 * @param numPerso Le num√©ro du personnage choisi par le joueur
	 */
	public void evenementChoixPersonnage(String pseudo, int numPerso) {
		this.frmChoixPersonnage.dispose(); // Ferme la fen√™tre de choix de personnage
		this.frmArene.setVisible(true); // Affiche la fen√™tre de jeu
		// Envoie le pseudo et le personnage choisi au serveur (ou au client selon le mode) en passant par la m√©thode envoi de la classe JeuClient. On transtype leJeu en JeuClient car c'est lui qui poss√®de l'objet de type Connection pour communiquer avec l'ordinateur distant
		((JeuClient)this.leJeu).envoi(PSEUDO+STRINGSEPARE+pseudo+STRINGSEPARE+numPerso);

	}
	
	/**
	 * G√®re les √©v√©nements provenant du JeuServeur.
	 * @param ordre L'ordre √† ex√©cuter (par exemple, ajout d'un mur)
	 * @param info L'information √† traiter
	 */
	public void evenementJeuServeur(String ordre, Object info) {
		switch(ordre) {
		case AJOUTMUR:
			 // Ajoute un mur dans l'ar√®ne (via un JLabel) via la m√©thode ajoutMurs
            if (info instanceof JLabel) {
                frmArene.ajoutMurs((JLabel) info);
            } else {
                System.out.println("Erreur : l'objet n'est pas un JLabel.");
            }
            break;
        // Envoie le panel des murs au client
		case AJOUTPANELMURS:
			this.leJeu.envoi((Connection)info, this.frmArene.getJpnMurs());
			break;
		// On transtype info en JLabel et on l'ajoute √† l'ar√®ne via la m√©thode ajoutJLabelJeu
		case AJOUTJLABELJEU:
			this.frmArene.ajoutJLabelJeu((JLabel)info);
			break;
		// Envoie le panel du jeu au client
		case MODIFPANELJEU:
			this.leJeu.envoi((Connection) info, this.frmArene.getJpnJeu());
			break;
		// // Ajoute un message dans le chat et l'envoie √† tous les clients en appelant la m√©thode envoi sur leJeu (qu'on aura transtyp√© en JeuServeur et en lui passant en param√®tre le getter sur txtChat). On transtype aussi info en String.
		case AJOUTPHRASE :
			this.frmArene.ajoutTchat((String)info);
			((JeuServeur)this.leJeu).envoi(this.frmArene.getTxtChat());
			break;
		}
	}
	
	/**
	 * G√®re les √©v√©nements provenant du JeuClient
	 * @param ordre L'ordre √† ex√©cuter
	 * @param info L'information √† traiter
	 */
	public void evenementJeuClient(String ordre, Object info) {
		// Tester l'ordre re√ßu
		switch(ordre) {
		// Si cet ordre est bien l'ajout du panel des murs, il faut appeler le setter correspondant dans Arene en lui envoyant info en parametre apres l'avoir transtyp√© en JPanel
		case AJOUTPANELMURS :
			this.frmArene.setJpnMurs((JPanel)info);
			break;
		// Si cet ordre est bien l'ajout du panel du jeu, il faut appeler le setter correspondant dans Arene en lui envoyant info en parametre apres l'avoir transtyp√© en JPanel
		case MODIFPANELJEU :
			this.frmArene.setJpnJeu((JPanel)info);
			break;
		// Solliciter l'ar√®ne en appelant le setter sur txtChat pour modifier le contenu du tchat dans l'ar√®ne (sans oublier de transtyper l'information en String avant de l'envoyer √† l'ar√®ne) 
		case MODIFTCHAT :
			this.frmArene.setTxtChat((String)info);
			break;
		case JOUESON :
			System.out.println("üì¢ Ordre JOUESON re√ßu avec info = " + info);
			this.frmArene.joueSon((Integer)info);
			break;
		}
	}
	
	/**
	 * Envoyer l'information re√ßue en param√®tre, vers l'ordinateur distant, en appelant la m√©thode envoi sur leJeu, apr√®s l'avoir transtyp√© en JeuClient. Mais attention, l'information √† envoyer (donc le texte) doit √™tre pr√©c√©d√© d'un ordre pour que JeuServeur puisse savoir de quoi il s'agit. Il faut donc envoyer "tchat", suivi du caract√®re de s√©paration (~) suivi du texte.
	 * @param info Le message du chat √† envoyer.
	 */
	public void evenementArene(Object info) {
		// Si info est une instance de String, envoie le message de chat avec un ordre "tchat" √† l'autre joueur (client ou serveur)
		if(info instanceof String) {
			((JeuClient)this.leJeu).envoi(TCHAT+STRINGSEPARE+info);
		// Si info est une instance de Integer, envoie le message de faire une action avec un ordre "action"
		}else if (info instanceof Integer) {
			((JeuClient)this.leJeu).envoi(ACTION+STRINGSEPARE+info);
		}
	}

	/**
	 * Envoie une information vers l'ordinateur distant via l'objet Connection. Elle d√©l√®gue simplement la t√¢che √† la m√©thode envoi de la classe Connection.
	 * @param connection L'objet Connection utilis√© pour envoyer l'information
	 * @param info L'information √† envoyer
	 */
	public void envoi(Connection connection, Object info) {
		connection.envoi(info); // D√©l√®gue l'envoi de l'information √† l'objet Connection.
	}
	
	/**
	 * M√©thode appel√©e lors de la r√©ception d'informations depuis un autre ordinateur
	 * @param connection La connexion depuis laquelle l'information a √©t√© re√ßue
	 * @param ordre L'ordre √† ex√©cuter (par exemple, "connexion", "r√©ception")
	 * @param info L'information re√ßue
	 */
	@Override
	public void reception(Connection connection, String ordre, Object info) {
		// TODO Auto-generated method stub
		switch(ordre){
		case CONNEXION:
			// Si l'ordre re√ßu est "CONNEXION", un joueur a demand√© √† se connecter
			// Si on est d√©j√† dans un jeu serveur, on g√®re la connexion, sinon on passe en mode client et la fen√™tre choixPersonnage s'affiche
			if(!(this.leJeu instanceof JeuServeur)) {
				this.leJeu = new JeuClient(this); // Change le mode de jeu en client
				this.leJeu.connexion(connection); // Etablit la connexion avec le serveur
				this.frmDemarrageJeu.dispose(); // Ferme la fen√™tre de d√©marrage
				this.frmArene = new Arene(this, CLIENT); // Cr√©e la fen√™tre du jeu en mode client
				this.frmChoixPersonnage = new ChoixPersonnage(this); // Cr√©e la fen√™tre de choix du personnage
				this.frmChoixPersonnage.setVisible(true); // Affiche la fen√™tre de choix du personnage
			} else {
			this.leJeu.connexion(connection); // G√®re la connexion du joueur au serveur
			}
			break;
		case RECEPTION:
			// Si l'ordre est "RECEPTION", traite l'information re√ßue, avec la m√©thode reception de la classe Jeu
			this.leJeu.reception(connection, info);
			break;
		case "deconnexion":
			// G√®re la d√©connexion (pas encore impl√©ment√©e ici).
			break;
		}
	}
}